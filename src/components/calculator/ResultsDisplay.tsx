
import React from 'react';
import { formatCurrency, formatPercent } from '@/utils/formatters';
import type { CalculationResults } from '@/hooks/useCalculator';
import { jsPDF } from 'jspdf';
import 'jspdf-autotable';
import { toast } from "@/components/ui/use-toast";

interface ResultsDisplayProps {
  results: CalculationResults;
  onGenerateReport: () => void;
  reportGenerated: boolean;
}

export const ResultsDisplay: React.FC<ResultsDisplayProps> = ({
  results,
  onGenerateReport,
  reportGenerated
}) => {
  const {
    aiCostMonthly,
    humanCostMonthly,
    monthlySavings,
    yearlySavings,
    savingsPercentage,
  } = results;

  const generatePDF = () => {
    const doc = new jsPDF();
    let yPos = 20;
    
    // Add header
    doc.setFontSize(20);
    doc.setTextColor(246, 82, 40); // Your brand color
    doc.text('AI Cost Savings Analysis', 20, yPos);
    yPos += 20;
    
    // Add summary
    doc.setFontSize(12);
    doc.setTextColor(0);
    doc.text('Cost Analysis Summary', 20, yPos);
    yPos += 10;
    
    // Add data using auto-table
    const tableData = [
      ['Monthly AI Cost', formatCurrency(aiCostMonthly.total)],
      ['Monthly Human Cost', formatCurrency(humanCostMonthly)],
      ['Monthly Savings', formatCurrency(Math.abs(monthlySavings))],
      ['Yearly Savings', formatCurrency(Math.abs(yearlySavings))],
      ['Cost Reduction', formatPercent(Math.abs(savingsPercentage))]
    ];
    
    (doc as any).autoTable({
      startY: yPos,
      head: [['Metric', 'Value']],
      body: tableData,
      theme: 'grid',
      styles: { fontSize: 10 },
      headStyles: { fillColor: [246, 82, 40] },
    });
    
    yPos = (doc as any).previousAutoTable.finalY + 20;
    
    // Add breakdown
    if (aiCostMonthly.voice > 0) {
      doc.text('Voice AI Cost: ' + formatCurrency(aiCostMonthly.voice), 20, yPos);
      yPos += 10;
    }
    if (aiCostMonthly.chatbot > 0) {
      doc.text('Chatbot Cost: ' + formatCurrency(aiCostMonthly.chatbot), 20, yPos);
      yPos += 10;
    }
    
    // Add proposal section
    yPos += 20;
    doc.setFontSize(14);
    doc.setTextColor(246, 82, 40);
    doc.text('Our Proposal', 20, yPos);
    yPos += 10;
    
    doc.setFontSize(12);
    doc.setTextColor(0);
    const savingsText = `Based on your current setup, we project that implementing our AI solution will save your organization ${formatCurrency(Math.abs(yearlySavings))} annually, representing a ${formatPercent(Math.abs(savingsPercentage))} reduction in costs.`;
    
    const splitText = doc.splitTextToSize(savingsText, 170);
    doc.text(splitText, 20, yPos);
    
    yPos += splitText.length * 7 + 10;
    
    // Add implementation timeline
    doc.text('Implementation Timeline:', 20, yPos);
    yPos += 10;
    const timelineData = [
      ['Week 1-2', 'Initial Setup and Configuration'],
      ['Week 3-4', 'Training and Integration'],
      ['Week 5-6', 'Testing and Optimization'],
      ['Week 7-8', 'Full Deployment and Support']
    ];
    
    (doc as any).autoTable({
      startY: yPos,
      head: [['Timeline', 'Phase']],
      body: timelineData,
      theme: 'grid',
      styles: { fontSize: 10 },
      headStyles: { fillColor: [246, 82, 40] },
    });
    
    // Add footer
    const pageHeight = doc.internal.pageSize.height;
    doc.setFontSize(10);
    doc.setTextColor(128);
    doc.text('Generated by AiGent Compass - www.chatsites.ai', 20, pageHeight - 20);
    
    // Save the PDF
    doc.save('ai-proposal.pdf');
    toast({
      title: "Proposal Generated",
      description: "Your proposal has been generated and downloaded.",
    });
  };

  return (
    <div className="space-y-8 animate-fadeIn">
      {/* Monthly Costs */}
      <div className="grid grid-cols-2 gap-6 mb-8">
        <div className="result-card">
          <div className="text-sm text-gray-500 mb-1">Monthly AI Cost</div>
          <div className="text-2xl font-bold text-brand-500">
            {formatCurrency(aiCostMonthly.total)}
          </div>
        </div>
        
        <div className="result-card">
          <div className="text-sm text-gray-500 mb-1">Monthly Human Cost</div>
          <div className="text-2xl font-bold text-gray-700">
            {formatCurrency(humanCostMonthly)}
          </div>
        </div>
      </div>
      
      {/* Savings Metrics */}
      <div className="result-card mb-8">
        <div className="flex justify-between items-center mb-4">
          <div className="text-lg font-medium text-gray-700">Monthly Savings</div>
          <div className={`text-2xl font-bold ${monthlySavings >= 0 ? 'text-green-600' : 'text-red-500'}`}>
            {formatCurrency(Math.abs(monthlySavings))}
            {monthlySavings < 0 && <span className="text-red-500"> (Loss)</span>}
          </div>
        </div>
        
        <div className="flex justify-between items-center mb-2">
          <div className="text-sm text-gray-600">Annual Savings</div>
          <div className={`text-lg font-semibold ${yearlySavings >= 0 ? 'text-green-600' : 'text-red-500'}`}>
            {formatCurrency(Math.abs(yearlySavings))}
          </div>
        </div>
        
        <div className="flex justify-between items-center">
          <div className="text-sm text-gray-600">Cost Reduction</div>
          <div className={`text-lg font-semibold ${savingsPercentage >= 0 ? 'text-green-600' : 'text-red-500'}`}>
            {formatPercent(Math.abs(savingsPercentage))}
          </div>
        </div>
        
        {/* Savings visualization */}
        <div className="mt-4 pt-4 border-t border-gray-100">
          <div className="relative h-6 bg-gray-200 rounded-full overflow-hidden">
            <div 
              className={`absolute top-0 left-0 h-full ${savingsPercentage >= 0 ? 'bg-green-500' : 'bg-red-500'}`}
              style={{ width: `${Math.min(Math.abs(savingsPercentage), 100)}%` }}
            ></div>
          </div>
        </div>
      </div>
      
      {/* Generate Proposal Button */}
      <div className="flex justify-center gap-4">
        <button 
          onClick={generatePDF}
          className="bg-brand-500 hover:bg-brand-600 text-white font-medium py-3 px-8 rounded-lg transition-all duration-200"
        >
          Generate Proposal PDF
        </button>
      </div>
    </div>
  );
};
